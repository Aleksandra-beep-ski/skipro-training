class SkiProApp {
    constructor() {
        this.API_BASE = window.location.origin + '/api';
        this.currentUser = null;
        this.trainings = [];
        this.resorts = [];
        this.currentCalendarDate = new Date();
        this.init();
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SkiPro App...');
        await this.loadInitialData();
        this.initAuth();
        this.initEventListeners();
        this.initCalendar();
        console.log('‚úÖ SkiPro App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async loadInitialData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            const trainingsResponse = await fetch(`${this.API_BASE}/trainings`);
            this.trainings = await trainingsResponse.json();
            this.renderTrainings();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä–æ—Ä—Ç—ã
            const resortsResponse = await fetch(`${this.API_BASE}/resorts`);
            this.resorts = await resortsResponse.json();
            this.renderResorts();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    renderTrainings() {
        const container = document.getElementById('trainings-container');
        if (!container) return;

        container.innerHTML = this.trainings.map(training => `
            <article id="${training.type}" class="product-card">
                <h2>${training.name}</h2>
                <div class="image-container">
                    <img src="images/${training.image}" alt="${training.name}">
                </div>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${training.description}</p>
                ${training.program ? `<p><strong>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:</strong> ${training.program}</p>` : ''}
                ${training.result ? `<p><strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${training.result}</p>` : ''}
                <p><strong>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${training.duration}</p>
                <p class="price"><strong>–°—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${training.price}</p>
                <button onclick="app.showBookingModal('${training.name}')" class="booking-btn">
                    –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                </button>
                <a href="#">–ö –Ω–∞—á–∞–ª—É —Ä–∞–∑–¥–µ–ª–∞</a>
            </article>
        `).join('');
    }

    renderResorts() {
        const grid = document.getElementById('resortsGrid');
        if (!grid) return;

        grid.innerHTML = this.resorts.map(resort => `
            <div class="resort-card">
                <div class="resort-image">
                    <img src="images/${resort.image}" alt="${resort.name}">
                </div>
                <div class="resort-content">
                    <div class="resort-header">
                        <h3>${resort.name}</h3>
                        <div class="temperature">${resort.temperature}</div>
                    </div>
                    <div class="weather-details">
                        <div class="weather-item">
                            <span class="label">–ü–æ–≥–æ–¥–∞:</span>
                            <span class="value">${resort.weather}</span>
                        </div>
                        <div class="weather-item">
                            <span class="label">–°–Ω–µ–∂–Ω—ã–π –ø–æ–∫—Ä–æ–≤:</span>
                            <span class="value">${resort.snow}</span>
                        </div>
                        <div class="weather-item">
                            <span class="label">–í–ª–∞–∂–Ω–æ—Å—Ç—å:</span>
                            <span class="value">${resort.humidity}</span>
                        </div>
                        <div class="weather-item">
                            <span class="label">–í–µ—Ç–µ—Ä:</span>
                            <span class="value">${resort.wind}</span>
                        </div>
                        <div class="weather-item conditions">
                            <span class="label">–£—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞—Ç–∞–Ω–∏—è:</span>
                            <span class="value ${resort.conditions === '–ò–¥–µ–∞–ª—å–Ω—ã–µ' || resort.conditions === '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–µ' ? 'excellent' : 'good'}">
                                ${resort.conditions}
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
    }

    initAuth() {
        this.updateAuthUI();
    }

    updateAuthUI() {
        const nav = document.querySelector('nav ul');
        if (!nav) return;

        const oldAuthBtn = nav.querySelector('.auth-btn-item');
        if (oldAuthBtn) oldAuthBtn.remove();

        const authBtn = document.createElement('li');
        authBtn.className = 'auth-btn-item';
        
        if (this.currentUser) {
            authBtn.innerHTML = `
                <button class="auth-btn" onclick="app.logout()">
                    –í—ã–π—Ç–∏ (${this.currentUser.name})
                </button>
            `;
        } else {
            authBtn.innerHTML = `
                <button class="auth-btn" onclick="app.showLoginModal()">
                    –í–æ–π—Ç–∏
                </button>
            `;
        }
        
        nav.appendChild(authBtn);
    }

    showLoginModal() {
        const modal = this.createModal(`
            <h2>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
            <form id="loginForm">
                <div class="form-group">
                    <label for="loginEmail">Email:</label>
                    <input type="email" id="loginEmail" required>
                </div>
                <div class="form-group">
                    <label for="loginPassword">–ü–∞—Ä–æ–ª—å:</label>
                    <input type="password" id="loginPassword" required>
                </div>
                <button type="submit" class="btn">–í–æ–π—Ç–∏</button>
            </form>
            <p style="text-align: center; margin-top: 1rem;">
                –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="#" onclick="app.showRegisterModal()">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
            </p>
        `);

        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            await this.login();
        });
    }

    showRegisterModal() {
        const modal = this.createModal(`
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
            <form id="registerForm">
                <div class="form-group">
                    <label for="regName">–ò–º—è:</label>
                    <input type="text" id="regName" required>
                </div>
                <div class="form-group">
                    <label for="regEmail">Email:</label>
                    <input type="email" id="regEmail" required>
                </div>
                <div class="form-group">
                    <label for="regPassword">–ü–∞—Ä–æ–ª—å:</label>
                    <input type="password" id="regPassword" required minlength="6">
                </div>
                <div class="form-group">
                    <label for="regPhone">–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                    <input type="tel" id="regPhone" required>
                </div>
                <button type="submit" class="btn">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</button>
            </form>
        `);

        document.getElementById('registerForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            await this.register();
        });
    }

    async login() {
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;

        try {
            const response = await fetch(`${this.API_BASE}/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
            });

            const result = await response.json();

            if (response.ok) {
                this.currentUser = result.user;
                this.showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${this.currentUser.name}!`, 'success');
                this.closeModal();
                this.updateAuthUI();
                if (this.renderCalendar) {
                    this.renderCalendar(this.currentCalendarDate);
                }
            } else {
                this.showNotification(result.error, 'error');
            }
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }

    async register() {
        const name = document.getElementById('regName').value;
        const email = document.getElementById('regEmail').value;
        const password = document.getElementById('regPassword').value;
        const phone = document.getElementById('regPhone').value;

        try {
            const response = await fetch(`${this.API_BASE}/register`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, email, password, phone })
            });

            const result = await response.json();

            if (response.ok) {
                this.showNotification('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success');
                this.closeModal();
                this.showLoginModal();
            } else {
                this.showNotification(result.error, 'error');
            }
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
        }
    }

    logout() {
        this.currentUser = null;
        this.showNotification('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success');
        this.updateAuthUI();
        if (this.renderCalendar) {
            this.renderCalendar(this.currentCalendarDate);
        }
    }

    showBookingModal(trainingType) {
        if (!this.currentUser) {
            this.showNotification('–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            this.showLoginModal();
            return;
        }

        const modal = this.createModal(`
            <h2>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</h2>
            <form id="bookingForm">
                <div class="form-group">
                    <label>–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</label>
                    <input type="text" value="${trainingType}" readonly>
                </div>
                <div class="form-group">
                    <label for="bookingDate">–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</label>
                    <input type="date" id="bookingDate" required>
                </div>
                <div class="form-group">
                    <label for="bookingTime">–í—Ä–µ–º—è:</label>
                    <select id="bookingTime" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                        <option value="09:00">09:00</option>
                        <option value="11:00">11:00</option>
                        <option value="13:00">13:00</option>
                        <option value="15:00">15:00</option>
                        <option value="17:00">17:00</option>
                    </select>
                    <div id="timeAvailability" style="margin-top: 5px; font-size: 0.9rem;"></div>
                </div>
                <div class="form-group">
                    <label for="bookingNotes">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</label>
                    <textarea id="bookingNotes" rows="3"></textarea>
                </div>
                <button type="submit" class="btn" id="submitBookingBtn">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
            </form>
        `);

        const dateInput = document.getElementById('bookingDate');
        dateInput.min = new Date().toISOString().split('T')[0];

        const checkAvailability = async () => {
            const date = dateInput.value;
            const time = document.getElementById('bookingTime').value;
            const availabilityDiv = document.getElementById('timeAvailability');
            const submitBtn = document.getElementById('submitBookingBtn');

            if (date && time) {
                try {
                    const response = await fetch(`${this.API_BASE}/availability?date=${date}&time=${time}`);
                    const result = await response.json();
                    
                    if (result.available) {
                        availabilityDiv.innerHTML = '<span style="color: green;">‚úì –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–Ω–æ</span>';
                        submitBtn.disabled = false;
                    } else {
                        availabilityDiv.innerHTML = '<span style="color: red;">‚úó –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ</span>';
                        submitBtn.disabled = true;
                    }
                } catch (error) {
                    availabilityDiv.innerHTML = '<span style="color: orange;">‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å</span>';
                    submitBtn.disabled = false;
                }
            } else {
                availabilityDiv.innerHTML = '';
                submitBtn.disabled = false;
            }
        };

        dateInput.addEventListener('change', checkAvailability);
        document.getElementById('bookingTime').addEventListener('change', checkAvailability);

        document.getElementById('bookingForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            await this.processBooking(trainingType);
        });
    }

    async processBooking(trainingType) {
        const date = document.getElementById('bookingDate').value;
        const time = document.getElementById('bookingTime').value;
        const notes = document.getElementById('bookingNotes').value;

        try {
            const response = await fetch(`${this.API_BASE}/bookings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId: this.currentUser.id,
                    trainingType,
                    date,
                    time,
                    notes
                })
            });

            const result = await response.json();

            if (response.ok) {
                this.showNotification('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
                this.closeModal();
                this.sendBookingEmail(result.booking);
                if (this.renderCalendar) {
                    this.renderCalendar(this.currentCalendarDate);
                }
            } else {
                this.showNotification(result.error, 'error');
            }
        } catch (error) {
            this.showNotification('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        }
    }

    sendBookingEmail(booking) {
        const subject = `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${booking.trainingType}`;
        const body = `
–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${this.currentUser.name}!

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ SkiPro Training.

–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ${booking.trainingType}
–î–∞—Ç–∞: ${booking.date}
–í—Ä–µ–º—è: ${booking.time}
ID –±—Ä–æ–Ω–∏: ${booking.id}

–ö–æ–º–∞–Ω–¥–∞ SkiPro Training
        `.trim();

        this.sendEmail(this.currentUser.email, subject, body);
    }

    initCalendar() {
        const calendarGrid = document.getElementById('calendarGrid');
        if (calendarGrid) {
            this.renderCalendar(this.currentCalendarDate);
            this.setupCalendarEvents();
        }
    }

    setupCalendarEvents() {
        const prevBtn = document.getElementById('prevMonth');
        const nextBtn = document.getElementById('nextMonth');
        
        if (prevBtn) prevBtn.addEventListener('click', () => this.changeMonth(-1));
        if (nextBtn) nextBtn.addEventListener('click', () => this.changeMonth(1));
    }

    changeMonth(direction) {
        this.currentCalendarDate.setMonth(this.currentCalendarDate.getMonth() + direction);
        this.renderCalendar(this.currentCalendarDate);
    }

    async renderCalendar(date) {
        const calendarGrid = document.getElementById('calendarGrid');
        const currentMonthElem = document.getElementById('currentMonth');
        
        if (!calendarGrid || !currentMonthElem) return;

        currentMonthElem.textContent = date.toLocaleDateString('ru-RU', { 
            month: 'long', 
            year: 'numeric' 
        });

        calendarGrid.innerHTML = '';

        const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        daysOfWeek.forEach(day => {
            const dayElem = document.createElement('div');
            dayElem.className = 'calendar-day header';
            dayElem.textContent = day;
            calendarGrid.appendChild(dayElem);
        });

        let bookings = [];
        try {
            const response = await fetch(`${this.API_BASE}/bookings`);
            bookings = await response.json();
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        }

        const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
        const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
        const daysInMonth = lastDay.getDate();
        
        let firstDayOfWeek = firstDay.getDay();
        if (firstDayOfWeek === 0) firstDayOfWeek = 7;

        for (let i = 1; i < firstDayOfWeek; i++) {
            const emptyDay = document.createElement('div');
            emptyDay.className = 'calendar-day other-month';
            calendarGrid.appendChild(emptyDay);
        }

        for (let day = 1; day <= daysInMonth; day++) {
            const dayElem = document.createElement('div');
            dayElem.className = 'calendar-day';
            
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = day;
            dayElem.appendChild(dayNumber);
            
            const currentDateStr = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
            const dayBookings = bookings.filter(booking => 
                booking.date === currentDateStr && 
                booking.status !== 'cancelled'
            );
            
            if (dayBookings.length > 0) {
                dayElem.classList.add('has-training');
                
                dayBookings.forEach(booking => {
                    const trainingElem = document.createElement('div');
                    trainingElem.className = 'training-item';
                    trainingElem.textContent = `${booking.time} - ${booking.trainingType}`;
                    dayElem.appendChild(trainingElem);
                });
            }
            
            calendarGrid.appendChild(dayElem);
        }
    }

    createModal(content) {
        const modal = document.createElement('div');
        modal.className = 'modal show';
        modal.innerHTML = `
            <div class="modal-content">
                <span class="close" onclick="app.closeModal()">&times;</span>
                ${content}
            </div>
        `;
        
        document.body.appendChild(modal);
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) this.closeModal();
        });
        
        return modal;
    }

    closeModal() {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.remove();
        }
    }

    showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.remove(), 3000);
    }

    sendEmail(to, subject, body) {
        const modal = this.createModal(`
            <div class="email-compact">
                <h2>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</h2>
                <div class="email-header">
                    <p><strong>–ö–æ–º—É:</strong> ${to}</p>
                    <p><strong>–¢–µ–º–∞:</strong> ${subject}</p>
                </div>
                <div class="email-scrollable">
                    <div class="email-preview">
                        ${body.replace(/\n/g, '<br>')}
                    </div>
                </div>
                <div class="email-buttons">
                    <button onclick="app.sendRealEmail('${to}', '${subject}', \`${body.replace(/'/g, "\\'")}\`)" 
                            class="btn btn-send">
                        –û—Ç–∫—Ä—ã—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    </button>
                    <button onclick="app.closeModal()" class="btn btn-cancel">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `);
    }

    sendRealEmail(to, subject, body) {
        const mailtoLink = `mailto:${to}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
        window.open(mailtoLink, '_blank');
        this.closeModal();
        this.showNotification('–ü–∏—Å—å–º–æ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ!', 'success');
    }

    initEventListeners() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
            });
        });

        const contactForm = document.getElementById('contactForm');
        if (contactForm) {
            contactForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.handleContactForm();
            });
        }
    }

    handleContactForm() {
        const formData = {
            name: document.getElementById('contactName').value,
            email: document.getElementById('contactEmail').value,
            message: document.getElementById('contactMessage').value
        };

        const subject = '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏';
        const body = `
–ò–º—è: ${formData.name}
Email: ${formData.email}

–°–æ–æ–±—â–µ–Ω–∏–µ:
${formData.message}

–î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
        `.trim();

        this.sendEmail('sasha.zharkova00@mail.ru', subject, body);
        document.getElementById('contactForm').reset();
        this.showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏!', 'success');
    }
}

const app = new SkiProApp();

function showBookingModal(trainingType) {
    app.showBookingModal(trainingType);
}

function showLoginModal() {
    app.showLoginModal();
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –¥–∞–Ω–Ω—ã—Ö
    const checkDataLoading = setInterval(() => {
        const loadingElements = document.querySelectorAll('.loading');
        if (loadingElements.length > 0) {
            loadingElements.forEach(element => {
                if (element.textContent.includes('–ó–∞–≥—Ä—É–∑–∫–∞') && !element.textContent.includes('–æ—à–∏–±–∫–∞')) {
                    element.textContent = '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...';
                }
            });
        }
    }, 5000);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    document.addEventListener('error', function(e) {
        if (e.target.tagName === 'IMG') {
            console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', e.target.src);
            e.target.style.display = 'none';
        }
    }, true);
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', function(e) {
    console.error('Global error:', e.error);
});